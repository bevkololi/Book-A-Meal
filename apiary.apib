FORMAT: 1A
HOST: https://bookamealdb-api-heroku.herokuapp.com

# Book A Meal API

Book-A-Meal is an application that allows customers to make food orders and helps the food vendor know what the customers want to eat. This tracking helps keep work in order.
Find it on https://bevkololi.github.io or clone the files from https://github.com/bevkololi/Book-A-Meal.git. You can then open index.html file on your browser.

# Allowed HTTPS Requests

+ PUT     : To modify users, orders and menu 
+ POST    : To create users, meals orders and menu, and also sign up an login
+ GET     : To get meals, orders and menu
+ DELETE  : To delete meals, orders and menu using their id

# Description Of Usual Server Responses:

+ 200 OK - the request was successful.

+ 201 Created - the request was successful and a resourc (meal, user) was created.

+ 202 Accepted - After user sign up

+ 204 No Content - the request was successful but there is no representation to return (i.e. the response is empty).

+ 400 Bad Request - the request could not be understood or was missing required parameters.

+ 401 Unauthorized - authentication failed or user doesn't have permissions for requested operation.

+ 404 Not Found - resource was not found.

+ 405 Method Not Allowed - requested method is not supported for resource.



# Reference

## Home message [/]

### Home [GET]

Welcoming message to Book A Meal

+ Request (application/json)

        

+ Response 200 (application/json)

        "Welcome to Book A Meal"


## User Registration [/auth/signup]

### Register [POST]

You can create a user by sending a json request with a username, email and password.

+ Request (application/json)

        {   
            "username": "Emily",
            "email": "emily@gmail.com",
            "password": "pass1234"
        }

+ Response 201 (application/json)

        {
            'message': 'You registered successfully. Please login.'
        }


+ Response 202 (application/json)

        {
            'message': 'User already exists. Please login.'
        }
        
## User Login [/auth/login]

### Login [POST]

You can login to access your access token by sending a json request with a username, email and password.


+ Request (application/json)

        {   
            "username": "Emily",
            "email": "emily@gmail.com",
            "password": "pass1234"
        }
        
    + Headers

            Authorization: Bearer JWT Token

+ Response 201 (application/json)

        {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTUyODE5MDczNiwiZXhwIjoxNTI4NDA2NzM2fQ.geMNN5ze24fc23DMQrZlHOvitkrpmeZXraotUmt_MGQ",
            "message": "You logged in successfully."
        }


+ Response 401 (application/json)

        {
                    'message': 'Invalid email or password, Please try again.'
        }

### Create a Meal (Caterer Only) [POST]
    Add a new Bucket attached to the user. 
    NOTE: A valid token should be present in the header else a 401 or 403 response
    will be returned as seen in the log out section.

+ name (required, string) -  Name of the Meal
+ description (required, string) -  A description of the meal e.g contents
+ price (required, integer) -  The price of the specific meal

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

    + Body

        {
            "ingredients": "Ugali, fish, vegetables, spices",
            "name": "Ugali and fish",
            "price": 150
        }

+ Response 201 (application/json)

        {
            "descrption": "Ugali, fish, vegetables, spices",
            "id": 1,
            "message": "Meal created successfully",
            "name": "Ugali and fish",
            "price": 150
        }

## View all meals [api/v1/meals]

### Get meals [GET]

Caterer could use this to view meals and users too

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)

        [
            {
                "description": "With vegetables to go with",
                "id": 1,
                "name": "Ugali and nicely fried eggs",
                "price": 70
            },
            {
                "description": "Blaaaaah",
                "id": 2,
                "name": "Chai and maandazi",
                "price": 20
            },
            {
                "description": "Blaaaaah",
                "id": 3,
                "name": "Matoke and beef",
                "price": 100
            }
        ]

+ Response 202 (application/json)

        {
            "message": "This meal already exists!"
        }

## Meal manipulation [api/v1/meals/<int:id>]

### Get a Meal [GET]
You get a single meal by specifying its Id. (Caterer only)

+ Parameters
    + meal_id (required,integer) - Id of the meal to be returned


+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token


+ Response 200 (application/json)

        {
            "description": "With vegetables to go with",
            "id": 1,
            "name": "Ugali and nicely fried eggs",
            "price": 70
        }


### Edit a Meal [PUT]

You can update the properties of a meal.

+ name (string) -  Name of the Meal
+ description (string) - description of the meal
+ price (integer) - price of the meal

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

    + Body

            {
              "name": "Chips and chicken"
            }

+ Response 200 (application/json)

        {
            "description": "With vegetables to go with",
            "id": 1,
            "message": "Meal updated successfully",
            "name": "Chicken and chips",
            "price": 70
        
        }


### Delete a Meal [DELETE]
A specific meal can be deleted (Caterer)

+ Request (application/json)


    + Headers

            Authorization: Bearer JWT Token

+ Response 200 (application/json)

        {
            "message": "meal 1 deleted"
        }